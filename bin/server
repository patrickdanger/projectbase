#!/usr/bin/env coffee

http	= require 'http'
url		= require 'url'
fs 		= require 'fs'
path 	= require 'path'

jade	= require 'jade'
stylus	= require 'stylus'
coffee 	= require 'coffee-script'

server 	= http.createServer (req, resp) ->

	uri 		= url.parse req.url, yes
	query 		= uri.queryString
	filepath	= path.normalize uri.pathname
	
	file		= factory.file filepath

	path.exists file.filepath, (exists) ->		 
		if exists
			console.log "serving file #{file}"
			file.render (data) -> 
				resp.writeHead 200, if file.type then 'Content-Type': file.type
				resp.write data
				resp.end()
		else
			console.log "#{file} not found"
			resp.writeHead 404
			resp.end "404 File Not Found"
			
.listen 8080
console.log "Server started, listening on port 8080"

class FileFactory
	constructor:	(webroot = "webroot", srcroot = "src") ->
		@webroot = webroot
		@srcroot = srcroot
	file:			(filepath) ->
		type = path.extname(filepath).substr 1, path.extname(filepath).length
		switch type
			when 'html' 	then new HtmlFile path.join(@webroot, filepath), 'text/html'
			when 'styl'		then new StylusFile path.join(@srcroot, 'stylus', filepath), 'text/css'
			when 'coffee'	then new CoffeeFile path.join(@srcroot, 'coffee', filepath), 'application/x-javascript'
			when 'jade'		then new JadeFile path.join(@srcroot, 'jade', filepath), 'text/html'
			else			new File path.join(@webroot, filepath), null

exports.FileFactory = FileFactory
factory	= new FileFactory

class File
	constructor: 	(@filepath, @type) -> @name = path.basename @filepath
	toString:		() -> "#{@filepath}"
	render: 		(buffer) ->
		fs.readFile @filepath, (err, data) ->
			if err then buffer "#{err}"
			else buffer data

class HtmlFile extends File
	render: 		(buffer) ->		fs.readFile @filepath, 'utf8', (err, data) ->
										if err then buffer "#{err}"
										else buffer data

class StylusFile extends File
	render: 		(buffer) ->		fs.readFile @filepath, 'utf8', (err, data) ->
										if err then buffer "#{err}"
										else 
											stylus(data).render (err, css) ->
												if err then buffer "#{err}"
												else buffer css

class CoffeeFile extends File
	render: 		(buffer) ->		fs.readFile @filepath, 'utf8', (err, data) ->
										if err then buffer "#{err}"
										else buffer coffee.compile data

class JadeFile extends HtmlFile
	render: 		(buffer) ->		jade.renderFile @filepath, (err, html) ->
										if err then buffer "#{err}"
										else buffer html 
		
exports.File 		= File
exports.HtmlFile 	= HtmlFile
exports.JadeFile	= JadeFile
exports.StylusFile	= StylusFile
exports.CoffeeFile	= CoffeeFile